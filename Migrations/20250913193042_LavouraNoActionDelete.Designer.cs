// <auto-generated />
using System;
using API_TCC.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_TCC.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20250913193042_LavouraNoActionDelete")]
    partial class LavouraNoActionDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API_TCC.Model.Agrotoxico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("data_Cadastro")
                        .HasColumnType("datetime2");

                    b.Property<int>("fornecedorID")
                        .HasColumnType("int");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("preco")
                        .HasColumnType("real");

                    b.Property<float>("qtde")
                        .HasColumnType("real");

                    b.Property<int>("tipoID")
                        .HasColumnType("int");

                    b.Property<string>("unidade_Medida")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("fornecedorID");

                    b.HasIndex("tipoID");

                    b.ToTable("Agrotoxicos");
                });

            modelBuilder.Entity("API_TCC.Model.Aplicacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("agrotoxicoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("descricao")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("lavouraID")
                        .HasColumnType("int");

                    b.Property<float>("qtde")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("agrotoxicoID");

                    b.HasIndex("lavouraID");

                    b.ToTable("Aplicacoes");
                });

            modelBuilder.Entity("API_TCC.Model.AplicacaoInsumos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("descricao")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("insumoID")
                        .HasColumnType("int");

                    b.Property<int>("lavouraID")
                        .HasColumnType("int");

                    b.Property<float>("qtde")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("insumoID");

                    b.HasIndex("lavouraID");

                    b.ToTable("Aplicacao_Insumos");
                });

            modelBuilder.Entity("API_TCC.Model.CategoriaInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Categoria_Insumo");
                });

            modelBuilder.Entity("API_TCC.Model.Colheita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<double>("areaHectares")
                        .HasColumnType("float");

                    b.Property<string>("cooperativaDestino")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("descricao")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("lavouraID")
                        .HasColumnType("int");

                    b.Property<double>("precoPorSaca")
                        .HasColumnType("float");

                    b.Property<double>("quantidadeSacas")
                        .HasColumnType("float");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("lavouraID");

                    b.ToTable("Colheitas");
                });

            modelBuilder.Entity("API_TCC.Model.Custo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LavouraId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("aplicacaoAgrotoxicoID")
                        .HasColumnType("int");

                    b.Property<int?>("aplicacaoInsumoID")
                        .HasColumnType("int");

                    b.Property<int?>("colheitaID")
                        .HasColumnType("int");

                    b.Property<double>("custoTotal")
                        .HasColumnType("float");

                    b.Property<double>("ganhoTotal")
                        .HasColumnType("float");

                    b.Property<int?>("plantioID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LavouraId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("aplicacaoAgrotoxicoID");

                    b.HasIndex("aplicacaoInsumoID");

                    b.HasIndex("colheitaID");

                    b.HasIndex("plantioID");

                    b.ToTable("Custos");
                });

            modelBuilder.Entity("API_TCC.Model.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("telefone")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("API_TCC.Model.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("categoriaInsumoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("data_Cadastro")
                        .HasColumnType("datetime2");

                    b.Property<int>("fornecedorID")
                        .HasColumnType("int");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("preco")
                        .HasColumnType("real");

                    b.Property<float>("qtde")
                        .HasColumnType("real");

                    b.Property<string>("unidade_Medida")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("categoriaInsumoID");

                    b.HasIndex("fornecedorID");

                    b.ToTable("Insumos");
                });

            modelBuilder.Entity("API_TCC.Model.Lavoura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<float>("area")
                        .HasColumnType("real");

                    b.Property<float>("latitude")
                        .HasColumnType("real");

                    b.Property<float>("longitude")
                        .HasColumnType("real");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Lavouras");
                });

            modelBuilder.Entity("API_TCC.Model.Plantio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<float>("areaPlantada")
                        .HasColumnType("real");

                    b.Property<DateTime>("dataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("lavouraID")
                        .HasColumnType("int");

                    b.Property<float>("qtde")
                        .HasColumnType("real");

                    b.Property<int>("sementeID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("lavouraID");

                    b.HasIndex("sementeID");

                    b.ToTable("Plantios");
                });

            modelBuilder.Entity("API_TCC.Model.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("API_TCC.Model.Semente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("data_Cadastro")
                        .HasColumnType("datetime2");

                    b.Property<int>("fornecedorID")
                        .HasColumnType("int");

                    b.Property<string>("marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("preco")
                        .HasColumnType("real");

                    b.Property<float>("qtde")
                        .HasColumnType("real");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("fornecedorID");

                    b.ToTable("Sementes");
                });

            modelBuilder.Entity("API_TCC.Model.TipoAgrotoxico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tipo_Agrotoxicos");
                });

            modelBuilder.Entity("API_TCC.Model.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("MovimentacaoEstoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("agrotoxicoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("descricao")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("insumoID")
                        .HasColumnType("int");

                    b.Property<int>("lavouraID")
                        .HasColumnType("int");

                    b.Property<int>("movimentacao")
                        .HasColumnType("int");

                    b.Property<int?>("origemAplicacaoID")
                        .HasColumnType("int");

                    b.Property<int?>("origemAplicacaoInsumoID")
                        .HasColumnType("int");

                    b.Property<int?>("origemPlantioID")
                        .HasColumnType("int");

                    b.Property<float>("qtde")
                        .HasColumnType("real");

                    b.Property<int?>("sementeID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("agrotoxicoID");

                    b.HasIndex("insumoID");

                    b.HasIndex("lavouraID");

                    b.HasIndex("sementeID");

                    b.ToTable("MovimentacoesEstoque");
                });

            modelBuilder.Entity("API_TCC.Model.Agrotoxico", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Fornecedor", "fornecedor")
                        .WithMany()
                        .HasForeignKey("fornecedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.TipoAgrotoxico", "tipo")
                        .WithMany()
                        .HasForeignKey("tipoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("fornecedor");

                    b.Navigation("tipo");
                });

            modelBuilder.Entity("API_TCC.Model.Aplicacao", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Agrotoxico", "agrotoxico")
                        .WithMany()
                        .HasForeignKey("agrotoxicoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Lavoura", "lavoura")
                        .WithMany()
                        .HasForeignKey("lavouraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("agrotoxico");

                    b.Navigation("lavoura");
                });

            modelBuilder.Entity("API_TCC.Model.AplicacaoInsumos", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Insumo", "insumo")
                        .WithMany()
                        .HasForeignKey("insumoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Lavoura", "lavoura")
                        .WithMany()
                        .HasForeignKey("lavouraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("insumo");

                    b.Navigation("lavoura");
                });

            modelBuilder.Entity("API_TCC.Model.CategoriaInsumo", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API_TCC.Model.Colheita", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Lavoura", "lavoura")
                        .WithMany()
                        .HasForeignKey("lavouraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("lavoura");
                });

            modelBuilder.Entity("API_TCC.Model.Custo", b =>
                {
                    b.HasOne("API_TCC.Model.Lavoura", "Lavoura")
                        .WithMany("Custos")
                        .HasForeignKey("LavouraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Aplicacao", "aplicacao")
                        .WithMany()
                        .HasForeignKey("aplicacaoAgrotoxicoID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("API_TCC.Model.AplicacaoInsumos", "aplicacaoInsumo")
                        .WithMany()
                        .HasForeignKey("aplicacaoInsumoID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("API_TCC.Model.Colheita", "colheita")
                        .WithMany()
                        .HasForeignKey("colheitaID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("API_TCC.Model.Plantio", "plantio")
                        .WithMany()
                        .HasForeignKey("plantioID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Lavoura");

                    b.Navigation("Usuario");

                    b.Navigation("aplicacao");

                    b.Navigation("aplicacaoInsumo");

                    b.Navigation("colheita");

                    b.Navigation("plantio");
                });

            modelBuilder.Entity("API_TCC.Model.Fornecedor", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API_TCC.Model.Insumo", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.CategoriaInsumo", "categoriaInsumo")
                        .WithMany()
                        .HasForeignKey("categoriaInsumoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Fornecedor", "fornecedor")
                        .WithMany()
                        .HasForeignKey("fornecedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("categoriaInsumo");

                    b.Navigation("fornecedor");
                });

            modelBuilder.Entity("API_TCC.Model.Lavoura", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API_TCC.Model.Plantio", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Lavoura", "lavoura")
                        .WithMany()
                        .HasForeignKey("lavouraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Semente", "semente")
                        .WithMany()
                        .HasForeignKey("sementeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("lavoura");

                    b.Navigation("semente");
                });

            modelBuilder.Entity("API_TCC.Model.RefreshToken", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API_TCC.Model.Semente", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Fornecedor", "fornecedor")
                        .WithMany()
                        .HasForeignKey("fornecedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("fornecedor");
                });

            modelBuilder.Entity("API_TCC.Model.TipoAgrotoxico", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MovimentacaoEstoque", b =>
                {
                    b.HasOne("API_TCC.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Agrotoxico", "Agrotoxico")
                        .WithMany()
                        .HasForeignKey("agrotoxicoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API_TCC.Model.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("insumoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API_TCC.Model.Lavoura", "Lavoura")
                        .WithMany()
                        .HasForeignKey("lavouraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_TCC.Model.Semente", "Semente")
                        .WithMany()
                        .HasForeignKey("sementeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Agrotoxico");

                    b.Navigation("Insumo");

                    b.Navigation("Lavoura");

                    b.Navigation("Semente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API_TCC.Model.Lavoura", b =>
                {
                    b.Navigation("Custos");
                });
#pragma warning restore 612, 618
        }
    }
}
